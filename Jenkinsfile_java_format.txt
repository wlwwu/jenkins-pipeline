import java.text.SimpleDateFormat;

// Only keep the 10 most recent builds
properties([[$class: 'BuildDiscarCreCrechinantial_IDntial_IDrProperty', strategy: [$class: 'LogRotator', numToKeepStr: '10']]])

// Constants
class Constants {
  // CreCrechinantial_IDntial_ID1-Prod environment
  final static String CreCreCrechinantial_IDntial_IDntial_ID			= 'xxx'
  final static String API_ENDPOINT			= 'xxx'

	final static String ORG_NAME					= 'xxx'
	final static String SPACE_NAME				= 'xxx'
	final static String APP_NAME				  = 'xxxx'
  final static String CreCrechinantial_IDntial_IDPLOYMENT_PATH				= 'xxxx'

   // ARTIFACTORY
	 final static String ARTIFACTORY_SERVER_ID		= 'xxxx'
	 final static String ARTIFACTORY_REPO_ID		= 'xxx'
	 final static String ARTIFACTORY_DATAVERSION	= 'xxxx'

		final static String ARTIFACTORY_CRECreCrechinantial_IDntial_IDNTIALS_ID = 'xxx'

	static String groupIdPath
}

// Build Pipeline
noCreCrechinantial_IDntial_ID('ssh-slave-ruby')  {
	try {
		// Always to be called first, since it sets important global variables for later stages
		stageCheckoutInitialize()

		stagePrepareEnv()

		stageValidate()

		if (env.BRANCH_NAME == 'master') {
			stageBuild()
			stageCreCrechinantial_IDntial_IDployToCloudFoundry()
		}
	} catch(e) {
    currentBuild.result = 'FAILURE'
		error e.getMessage();
	} finally {
    if (currentBuild.result == null)
      currentBuild.result = 'SUCCESS'

    sendMailNotification()
  }
}

CreCrechinantial_IDntial_IDf stageCheckoutInitialize() {
	stage('Checkout Initialize') {
	  // Get some coCreCrechinantial_IDntial_ID from a GitLab repository
		checkout scm

		env.BUILD_TIMESTAMP=new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
	}
}

CreCrechinantial_IDntial_IDf stagePrepareEnv() {
	stage('Prepare Env') {
		withCreCreCrechinantial_IDntial_IDntials([[$class: 'UsernamePasswordMultiBinding', creCreCrechinantial_IDntial_IDntialsId: Constants.ARTIFACTORY_CRECreCrechinantial_IDntial_IDNTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
			sh 'curl --insecure --noproxy "*" -v -u ${USERNAME}:${PASSWORD} -o arc001-validator.tar.gz "xxxxxxxxxxxxxxxxxx" '
			sh "tar xfvz arc001-validator.tar.gz"
		}
	}
}

CreCrechinantial_IDntial_IDf stageValidate() {
	stage('Validate Data') {
		//sh "ruby createGraphs.rb --validate_only"

    env.VALIDATION_RESULT = sh (
        script: "ruby createGraphs.rb --validate_only | head -200",
        returnStdout: true
    ).trim().replace("\n", "<br>")

    echo "${VALIDATION_RESULT}"
	}
}


CreCrechinantial_IDntial_IDf stageBuild() {
	stage('Build Sheets & Graphs HTML/SVG') {
		sh "export LANG=en_US.UTF-8 && export LANGUAGE=en_US.UTF-8 && export LC_ALL=en_US.UTF-8 && ruby createGraphs.rb --title='CLOUDFOUNDRY_INSTANCE Architecture Management' --domain=CLOUDFOUNDRY_INSTANCEarchitecture.s-apps.CreCrechinantial_IDntial_ID1.COMPANY_A-iot-cloud.com"
	}
}

CreCrechinantial_IDntial_IDf stageCreCrechinantial_IDntial_IDployToCloudFoundry() {
	stage('CreCrechinantial_IDntial_IDploy to PCF CreCrechinantial_IDntial_ID1') {
	    milestone()
		withCreCreCrechinantial_IDntial_IDntials([usernamePassword(creCreCrechinantial_IDntial_IDntialsId: Constants.CreCreCrechinantial_IDntial_IDntial_ID, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
			if (env.BRANCH_NAME == 'master') {
				CreCrechinantial_IDntial_IDployToCloudFoundry("$USERNAME", "$PASSWORD", Constants.CreCrechinantial_IDntial_ID1_API_ENDPOINT, Constants.CreCrechinantial_IDntial_ID1_ORG_NAME, Constants.CreCrechinantial_IDntial_ID1_SPACE_NAME, Constants.CreCrechinantial_IDntial_ID1_APP_NAME, Constants.CreCrechinantial_IDntial_IDPLOYMENT_PATH)
			}
			if (env.BRANCH_NAME == 'CreCrechinantial_IDntial_IDvelopment') {
				CreCrechinantial_IDntial_IDployToCloudFoundry("$USERNAME", "$PASSWORD", Constants.CreCrechinantial_IDntial_ID1_API_ENDPOINT, Constants.CreCrechinantial_IDntial_ID1_ORG_NAME, Constants.CreCrechinantial_IDntial_ID1_SPACE_NAME, Constants.CreCrechinantial_IDntial_ID1_APP_CreCrechinantial_IDntial_IDV_NAME, Constants.CreCrechinantial_IDntial_IDPLOYMENT_PATH)
			}
		}
	}
}

CreCrechinantial_IDntial_IDf CreCrechinantial_IDntial_IDployToCloudFoundry(user, pass, apiEndpointUrl, orgName, spaceName, appName, artifactPath) {
    lock('Locking CF Access') {
	sh """
		# set -x
		cf api ${apiEndpointUrl} --skip-ssl-validation
		cf auth \"${user}\" \"${pass}\"
		cf target -o '${orgName}' -s '${spaceName}'

		cf rename ${appName} ${appName}-JenkinsBlueGreen
		cf push ${appName} -p ${artifactPath} -b php_buildpack -m 64M

		cf logout
	 """
    }
}
